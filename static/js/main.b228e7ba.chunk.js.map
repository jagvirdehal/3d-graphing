{"version":3,"sources":["scene/settings.tsx","scene/vector.tsx","store.tsx","sidebar/sidebar-input.tsx","sidebar/sidebar.tsx","scene/camera.tsx","scene/vector-group.tsx","scene/scene.tsx","app.tsx","index.tsx"],"names":["CAMERA_AUTO_ROTATE","getRotation","pos","yrot","zrot","Math","acos","x","sqrt","z","y","Vector","props","meshHead","useRef","meshBody","material","color","target","THREE","useState","rotation","setRotation","size","length","setLength","useEffect","propsHead","mesh","head","propsBody","body","ref","position","args","useStore","create","set","vectorMap","Map","name","vectors","addVector","state","refresh","updateVector","Array","from","values","map","HeaderButtons","style","display","justifyContent","className","onClick","handleAdd","NumberInput","boundNumber","event","number","parseInt","currentTarget","value","handleChange","Number","isNaN","forceNumber","width","height","onKeyPress","charCode","key","charCodeAt","isNumber","preventDefault","onWheel","deltaY","scrollValue","onChange","defaultValue","VectorInput","myProps","getState","get","setX","setY","setZ","undefined","newProps","updateTarget","setFunc","alignItems","margin","toUpperCase","Sidebar","defaultNames","vectorNames","setVectorNames","inputs","myName","slice","concat","extend","OrbitControls","Camera","useThree","camera","domElement","gl","controls","useFrame","current","update","autoRotate","SETTINGS","VectorGroup","Scene","PI","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b228e7ba.chunk.js","sourcesContent":["export let CAMERA_AUTO_ROTATE = false;\r\nexport let Z_UP = true;\r\nexport const VECTOR_ROUNDNESS = 32;\r\n\r\nexport function toggleCameraAutoRotate() {\r\n    CAMERA_AUTO_ROTATE = !CAMERA_AUTO_ROTATE;\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GroupProps, MeshProps, Vector3, Euler } from 'react-three-fiber';\r\n\r\nimport * as SETTINGS from './settings';\r\n\r\nexport interface ObjectProps {\r\n    position?: Vector3;\r\n    scale?: Vector3;\r\n    rotation?: Euler;\r\n}\r\n\r\nexport interface VectorProps extends ObjectProps {\r\n    target: Vector3,\r\n    name: string,\r\n    \r\n    mesh?: {\r\n        head?: MeshProps,\r\n        body?: MeshProps,\r\n    },\r\n    size?: number,\r\n    color?: string | number | THREE.Color,\r\n}\r\n\r\nfunction getRotation(pos : THREE.Vector3) : [xRot : number, yRot : number, zRot : number] {\r\n    let yrot, zrot;\r\n\r\n    yrot = Math.acos(pos.x / Math.sqrt(pos.x ** 2 + pos.z ** 2));\r\n    if (pos.z < 0) {\r\n        yrot *= -1;\r\n    }\r\n    zrot = Math.acos(pos.y / Math.sqrt(pos.x ** 2 + pos.y ** 2 + pos.z ** 2));\r\n\r\n    yrot = yrot ? -yrot : 0;\r\n    zrot = zrot ? -zrot : 0;\r\n\r\n    return [0, yrot, zrot];\r\n}\r\n\r\nfunction Vector(props : VectorProps) {\r\n    const meshHead = useRef();\r\n    const meshBody = useRef();\r\n    const material = <meshStandardMaterial color={props.color} />\r\n\r\n    let [x, y, z] = props.target as number[];\r\n\r\n    let target = SETTINGS.Z_UP ?\r\n        new THREE.Vector3(y, z, x) :\r\n        new THREE.Vector3(x, y, z);\r\n            \r\n    const [rotation, setRotation] = useState(getRotation(target));\r\n    const [size, setSize] = useState(props.size ? props.size : 0.15);\r\n    const [length, setLength] = useState(Math.sqrt(\r\n        target.x ** 2 +\r\n        target.y ** 2 +\r\n        target.z ** 2\r\n    ));\r\n\r\n    useEffect(() => {\r\n        [x, y, z] = props.target as number[];\r\n        target = SETTINGS.Z_UP ?\r\n            new THREE.Vector3(y, z, x) :\r\n            new THREE.Vector3(x, y, z);\r\n        \r\n        setRotation(getRotation(target));\r\n        setLength(Math.sqrt(\r\n            target.x ** 2 +\r\n            target.y ** 2 +\r\n            target.z ** 2\r\n        ));\r\n    }, [props.target]);\r\n    \r\n    const propsHead = props.mesh && props.mesh.head ?\r\n        props.mesh.head :\r\n        [];\r\n    const propsBody = props.mesh && props.mesh.body ?\r\n        props.mesh.body :\r\n        [];\r\n\r\n    return (\r\n        <group {...props as GroupProps}>\r\n            <group rotation={rotation}>\r\n                <mesh\r\n                    {...propsHead}\r\n                    ref={meshHead}\r\n                    position={[0, length - size, 0]}\r\n                >\r\n                    <coneBufferGeometry args={[size, 2 * size, SETTINGS.VECTOR_ROUNDNESS]}/>\r\n                    {material}\r\n                </mesh>\r\n                <mesh\r\n                    {...propsBody}\r\n                    ref={meshBody}\r\n                    position={[0, length / 2 - size, 0]}\r\n                >\r\n                    <cylinderBufferGeometry\r\n                        args={[size / 2, size / 2, length - 2 * size, SETTINGS.VECTOR_ROUNDNESS]}\r\n                    />\r\n                    {material}\r\n                </mesh>\r\n            </group>\r\n        </group>\r\n    );\r\n}\r\n\r\nexport default Vector;\r\n","import create from 'zustand';\r\nimport Vector, { VectorProps } from './scene/vector';\r\n\r\nexport type State = {\r\n    vectorMap: Map<string, VectorProps>,\r\n    vectors: JSX.Element[],\r\n    addVector: (props: VectorProps) => void,\r\n    updateVector: (name: string, props: VectorProps) => void,\r\n    refresh: () => void,\r\n}\r\n\r\nexport const useStore = create<State>(set => ({\r\n    vectorMap: new Map([[\"v1\", {target: [1, 1, 1], name: \"v1\"}]]),\r\n    vectors: [],\r\n    \r\n    addVector: (props : VectorProps) => {\r\n        set(state => {\r\n            state.refresh();\r\n            return {vectorMap: state.vectorMap.set(props.name, props)}\r\n        });\r\n    },\r\n    \r\n    updateVector: (name : string, props : VectorProps) => {\r\n        set(state => {\r\n            state.refresh();\r\n            return {vectorMap: state.vectorMap.set(name, props)}\r\n        });\r\n    },\r\n\r\n    refresh: () => {\r\n        set(state => ({vectors: Array.from(state.vectorMap.values()).map((props) => {\r\n            return <Vector {...props} />\r\n        }) as []}))\r\n    }\r\n}));\r\n","import { CSSProperties, useState } from \"react\";\r\nimport { useStore } from \"store\";\r\n\r\nfunction HeaderButtons(props) {\r\n    const rowStyle : CSSProperties = {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    };\r\n\r\n    return(\r\n        <div style={rowStyle} className={\"header-buttons\"}>\r\n            <button onClick={props.handleAdd}>Add</button>\r\n            <button>Edit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction NumberInput(props) {\r\n    const numberStyle : CSSProperties = {\r\n        width: '5ch',\r\n        height: '4ch',\r\n    };\r\n\r\n    // Event handlers\r\n    \r\n    // Filters out non-numeric input, causes - to toggle negative\r\n    const keyFilter = (event : React.KeyboardEvent<any>) => {\r\n        const charCode = event.key.charCodeAt(0);\r\n        const isNumber = (charCode >= 48 && charCode <= 57);\r\n\r\n        if (event.key == '-') {\r\n            event.currentTarget.value = -1 * parseInt(event.currentTarget.value);\r\n            handleChange(event);\r\n        }\r\n\r\n        if (!isNumber) {\r\n            event.preventDefault();\r\n        }\r\n    };\r\n\r\n    // Limits value between -99 and 99\r\n    const boundNumber = (event : React.ChangeEvent<any>) => {\r\n        const number = parseInt(event.currentTarget.value);\r\n        if (number < -99) {\r\n            event.currentTarget.value = -99;\r\n        } else if (number > 99) {\r\n            event.currentTarget.value = 99;\r\n        }\r\n    }\r\n\r\n    // Force value to be a number, 0 if NaN\r\n    const forceNumber = (event : React.ChangeEvent<any>) => {\r\n        const number = parseInt(event.currentTarget.value);\r\n        event.currentTarget.value = number;\r\n\r\n        if (Number.isNaN(number)) {\r\n            event.currentTarget.value = 0;\r\n        }\r\n    };\r\n\r\n    // Enabled changing value via scroll\r\n    const scrollValue = (event : React.WheelEvent<any>) => {\r\n        const number = parseInt(event.currentTarget.value);\r\n\r\n        if (event.deltaY < 0) {\r\n            event.currentTarget.value = number + 1;\r\n        } else if (event.deltaY > 0) {\r\n            event.currentTarget.value = number - 1;\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        forceNumber(event);\r\n        boundNumber(event);\r\n        props.updateVector(event);\r\n    }\r\n\r\n    const handleWheel = (event) => {\r\n        scrollValue(event);\r\n        boundNumber(event);\r\n        props.updateVector(event);\r\n    }\r\n\r\n    return (\r\n        <input {...props} style={numberStyle} onKeyPress={keyFilter} onWheel={handleWheel} onChange={handleChange} defaultValue={props.value} />\r\n    )\r\n}\r\n\r\nfunction VectorInput(props) {\r\n    const rowStyle : CSSProperties = {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        margin: '0 10px',\r\n    };\r\n\r\n    const numberGroupStyle : CSSProperties = {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    };\r\n\r\n    const vectorMap = useStore.getState().vectorMap;\r\n    const myProps = vectorMap.get(props.name);\r\n    const target = myProps?.target ? myProps.target : [0, 0, 0];\r\n\r\n    const updateVector = useStore(state => state.updateVector);\r\n\r\n    const [x, setX] = useState(target[0]);\r\n    const [y, setY] = useState(target[1]);\r\n    const [z, setZ] = useState(target[2]);\r\n\r\n    if (myProps === undefined) {\r\n        return(<span></span>);\r\n    }\r\n\r\n    let newProps = myProps;\r\n    newProps.target = [x, y, z];\r\n    \r\n    updateVector(props.name, newProps);\r\n\r\n    const updateTarget = (event, setFunc) => {\r\n        setFunc(parseInt(event.currentTarget.value));\r\n    }\r\n\r\n    return(\r\n        <div className=\"vector-input\">\r\n            <hr />\r\n            <div style={rowStyle}>\r\n                <span className=\"label\">{props.name ? props.name.toUpperCase() : \"V *\"} </span>\r\n                <div style={numberGroupStyle} className=\"number-input-group\" >\r\n                    <NumberInput className=\"x-coord\" value={x} updateVector={event => updateTarget(event, setX)} />\r\n                    <NumberInput className=\"y-coord\" value={y} updateVector={event => updateTarget(event, setY)} />\r\n                    <NumberInput className=\"z-coord\" value={z} updateVector={event => updateTarget(event, setZ)} />\r\n                </div>\r\n                <button>Color</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { HeaderButtons, VectorInput };\r\n","import { useState } from 'react';\r\nimport { useStore } from 'store';\r\nimport { HeaderButtons, VectorInput } from './sidebar-input';\r\nimport './sidebar.css';\r\n\r\nfunction Sidebar() {\r\n    const vectorMap = useStore.getState().vectorMap;\r\n    const defaultNames = Array.from(vectorMap.values()).map((props) => {\r\n        return props.name;\r\n    })\r\n    \r\n    const [vectorNames, setVectorNames] = useState(defaultNames);\r\n    const inputs = vectorNames.map((name) => {\r\n        return <VectorInput name={name} />;\r\n    })\r\n\r\n    const addVector = useStore(state => state.addVector);\r\n    const handleAdd = (event) => {\r\n        const myName = `v${vectorNames.length + 1}`;\r\n        addVector({target: [0, 0, 1], name: myName});\r\n        setVectorNames(vectorNames.slice().concat([myName]));\r\n    }\r\n\r\n    return(\r\n        <div className=\"sidebar\">\r\n            <HeaderButtons handleAdd={handleAdd} />\r\n            {inputs}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n","import { useRef, useState } from 'react';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { CameraProps, extend, ReactThreeFiber, useFrame, useThree } from 'react-three-fiber';\r\nimport * as SETTINGS from './settings';\r\n\r\nextend({ OrbitControls });\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            'orbitControls': ReactThreeFiber.Object3DNode<OrbitControls, typeof OrbitControls>;\r\n        }\r\n    }\r\n}\r\n\r\nfunction Camera(props : CameraProps) {\r\n    const {\r\n        camera,\r\n        gl: { domElement },\r\n    } = useThree();\r\n\r\n    const controls = useRef<OrbitControls>();\r\n    useFrame((state) => {\r\n        if (controls.current) {\r\n            controls.current.update();\r\n            controls.current.autoRotate = SETTINGS.CAMERA_AUTO_ROTATE;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <orbitControls ref={controls} args={[camera, domElement]}/>\r\n    )\r\n}\r\n\r\nexport default Camera;\r\n","import { useStore } from 'store';\r\n\r\nfunction VectorGroup() {\r\n    const vectors = useStore(state => state.vectors);\r\n\r\n    return(\r\n        <group>\r\n            {vectors}\r\n        </group>\r\n    )\r\n}\r\n\r\nexport default VectorGroup;\r\n","import { Canvas } from 'react-three-fiber';\r\nimport Vector from './vector';\r\nimport Camera from './camera';\r\nimport VectorGroup from './vector-group';\r\n\r\nfunction Scene() {\r\n    return(\r\n        <div className=\"scene\">\r\n            <Canvas>\r\n                <group rotation={[0, 0, 0]}>\r\n                    <axesHelper rotation={[-Math.PI / 2, 0, -Math.PI / 2]}/>\r\n                    <gridHelper />\r\n                    <Vector target={[3, 0, 0]} name=\"v1\" />\r\n                    <VectorGroup />\r\n                </group>\r\n                <ambientLight />\r\n                <pointLight position={[10, 10, 10]}/>\r\n                <Camera />\r\n            </Canvas>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scene;\r\n","import Sidebar from './sidebar/sidebar';\r\nimport Scene from './scene/scene';\r\nimport './app.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"app\">\r\n            <Sidebar />\r\n            <Scene />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}